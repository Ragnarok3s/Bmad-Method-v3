name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  build:
    name: Lint and Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt

      - name: Install Node dependencies
        run: |
          if [ -f package.json ] && [ -f package-lock.json ]; then
            npm ci
          fi
          if compgen -G "**/package.json" > /dev/null; then
            find . -maxdepth 4 -name package.json -print0 | while IFS= read -r -d '' pkg; do
              dir="$(dirname "$pkg")"
              if [ -f "$dir/package-lock.json" ]; then
                (cd "$dir" && npm ci)
              fi
            done
          fi

      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if compgen -G "**/requirements.txt" > /dev/null; then
            find . -maxdepth 4 -name requirements.txt -print0 | while IFS= read -r -d '' req; do
              pip install -r "$req"
            done
          fi

      - name: Run Super-Linter
        uses: super-linter/super-linter@v6.4.1
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_BASH: true

      - name: Run Unit Tests
        run: ./scripts/test-unit.sh

      - name: Run Integration Tests
        run: ./scripts/test-integration.sh

      - name: Run E2E Tests
        run: ./scripts/test-e2e.sh

      - name: Execute Quality Gates
        run: ./scripts/run-quality-gates.sh

      - name: Upload Test & QA Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-artifacts
          path: |
            artifacts/
            docs/evidencias/
            grafana/
