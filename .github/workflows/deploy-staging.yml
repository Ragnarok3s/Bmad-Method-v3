name: CD Staging

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prechecks:
    name: Validar build e testes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt
      - name: Install Node dependencies
        run: |
          if [ -f package.json ] && [ -f package-lock.json ]; then
            npm ci
          fi
          if compgen -G "**/package.json" > /dev/null; then
            find . -maxdepth 4 -name package.json -print0 | while IFS= read -r -d '' pkg; do
              dir="$(dirname "$pkg")"
              if [ -f "$dir/package-lock.json" ]; then
                (cd "$dir" && npm ci)
              fi
            done
          fi
      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if compgen -G "**/requirements.txt" > /dev/null; then
            find . -maxdepth 4 -name requirements.txt -print0 | while IFS= read -r -d '' req; do
              pip install -r "$req"
            done
          fi
      - name: Validar scripts obrigatórios
        run: |
          ./scripts/test-unit.sh
          ./scripts/test-integration.sh

  deploy:
    name: Promover para staging via GitOps
    needs: prechecks
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.bmad-method.internal
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Preparar pacote de manifests
        run: |
          mkdir -p artifacts/manifests
          echo "render: argocd" > artifacts/manifests/README.md
      - name: Publicar pacote para aprovação manual
        uses: actions/upload-artifact@v4
        with:
          name: staging-manifests
          path: artifacts/manifests
      - name: Placeholder de sincronização GitOps
        run: |
          echo "Repositório de manifests deve receber commit via pipeline externa após aprovação manual."
