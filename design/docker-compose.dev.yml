version: "3.9"

services:
  frontend:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
    environment:
      NEXT_PUBLIC_CORE_API_BASE_URL: "http://localhost:8000"
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
      identity:
        condition: service_started
    restart: unless-stopped

  backend:
    build:
      context: ..
      dockerfile: services/core/Dockerfile
    environment:
      CORE_DATABASE_URL: "postgresql+psycopg://core:core@db:5432/core"
      CORE_ALLOWED_ORIGINS: "http://localhost:3000"
      CORE_TENANCY_PLATFORM_TOKEN: "platform-secret"
      CORE_AUTH_SESSION_TIMEOUT_SECONDS: 900
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  identity:
    build:
      context: ..
      dockerfile: services/identity/Dockerfile
    environment:
      CORE_DATABASE_URL: "postgresql+psycopg://core:core@db:5432/core"
      CORE_ALLOWED_ORIGINS: "http://localhost:3000"
      CORE_TENANCY_PLATFORM_TOKEN: "platform-secret"
      CORE_AUTH_SESSION_TIMEOUT_SECONDS: 900
    ports:
      - "8100:8100"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: core
      POSTGRES_USER: core
      POSTGRES_PASSWORD: core
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U core -d core"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  db_data:
